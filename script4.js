(() => { if (-1 === document.location.search.toLowerCase().indexOf("startup")) return; const t = window[atob("bG9jYWxTdG9yYWdl")]; window.lunaStartup = { timestamps: { "luna:startup:htmlInitializationTimestamp": 0, DOMContentLoaded: 0, decompressionStarted: 0, decompressionFinished: 0, "luna:build": 0, "luna:start": 0, "luna:starting": 0, "luna:startup:bundlesLoad": 0, "luna:startup:loadSimpleAssetsAsync": 0, "luna:startup:shaderReady": 0, "luna:startup:loadComplexAssetsAsync": 0, "luna:startup:loadPrefabsAsync": 0, "luna:startup:loadScenesAsync": 0, "luna:started": 0, frame: 0 }, measuredTime: { loadTime: 0, avgStartupTime: 0 }, logStartupEvent: function (t) { this.timestamps[t] = performance.now() }, notifyLoadingComplete: function () { const t = this.toSeconds(this.timestamps.frame), s = this.recordAverageStartupInfo(t); if (null !== s) { window.lunaStartup.measuredTime.avgStartupTime = s.avgStartupTime; const e = this.userFriendlyReport(t.toFixed(3), s.startupCount, s.avgStartupTime); return window.alert(e), e } return "" }, recordAverageStartupInfo: function (s) { const e = new URLSearchParams(location.search), a = t.getItem("buildID"), n = t.getItem("startupMeasurements") || '{ "timings": [] }'; let i = JSON.parse(n); const o = Deserializers.buildID; (e.has("clear") || o !== a) && (i = { timings: [] }, t.setItem("buildID", o)), e.delete("clear"), i.timings.push(s), t.setItem("startupMeasurements", JSON.stringify(i)); let r = !1; if (e.has("runs")) { const t = Number(e.get("runs")); t <= 1 ? e.delete("runs") : (e.set("runs", t - 1), r = !0) } if (history.replaceState(null, document.title, "?" + e.toString()), r) return location.reload(), null; if (e.has("outliers")) { let t = Number(e.get("outliers")); for (i.timings.sort(); t > 0;)i.timings.pop(), i.timings.shift(), t-- } const u = i.timings.reduce(((t, s) => t + s), 0), d = i.timings.length; return { startupCount: d, avgStartupTime: (u / d).toFixed(3) } }, toSeconds: t => t / 1e3, toFormattedSeconds(t) { return this.toSeconds(t).toFixed(3) }, toPercentsString: (t, s) => `${(t / s * 100).toFixed(1)}%`, userFriendlyReport: function (t, s, e) { const a = window.$environment.targetPlatform; let n = `Total (${a}): ${t}s - Average (${s} startups): ${e}s\n`; const i = this.toFormattedSeconds(this.timestamps.decompressionFinished - this.timestamps.decompressionStarted); let o = 0; const r = this.toFormattedSeconds(this.timestamps.DOMContentLoaded); n += `${r}s (${this.toPercentsString(r, t)}) - Loading from network (Optimise with Size Breakdown, Base64/Base122):\n`, n += `  - Decompressions (async): ${i}s\n`, o += this.timestamps.DOMContentLoaded; const u = Object.keys(Bridge.startup).reduce(((t, s) => t + Bridge.startup[s]), 0); n += `  - C# Code init: ${this.toFormattedSeconds(u)}s (Optimise with Runtime Analysis)\n`; const d = this.toFormattedSeconds(this.timestamps["luna:startup:bundlesLoad"] - this.timestamps["luna:start"]); n += `${d}s (${this.toPercentsString(d, t)}) - Assets Deserialization\n`, o += this.timestamps["luna:startup:bundlesLoad"] - this.timestamps["luna:start"]; const l = this.toFormattedSeconds(this.timestamps["luna:startup:loadSimpleAssetsAsync"] - this.timestamps["luna:startup:bundlesLoad"]); n += `${l}s (${this.toPercentsString(l, t)}) - Load: Textures, shaders, meshes, sounds, animations (Optimise with Size Breakdown)\n`, o += this.timestamps["luna:startup:loadSimpleAssetsAsync"] - this.timestamps["luna:startup:bundlesLoad"]; const m = this.toFormattedSeconds(this.timestamps["luna:startup:loadComplexAssetsAsync"] - this.timestamps["luna:startup:loadSimpleAssetsAsync"]); n += `${m}s (${this.toPercentsString(m, t)}) - Load: Cubemaps, materials, sprites, fonts, animators\n`, o += this.timestamps["luna:startup:loadComplexAssetsAsync"] - this.timestamps["luna:startup:loadSimpleAssetsAsync"]; const p = this.toFormattedSeconds(this.timestamps["luna:startup:loadPrefabsAsync"] - this.timestamps["luna:startup:loadComplexAssetsAsync"]); n += `${p}s (${this.toPercentsString(p, t)}) - Load: Prefabs\n`, o += this.timestamps["luna:startup:loadPrefabsAsync"] - this.timestamps["luna:startup:loadComplexAssetsAsync"]; const c = this.toFormattedSeconds(this.timestamps["luna:startup:loadScenesAsync"] - this.timestamps["luna:startup:loadPrefabsAsync"]); n += `${c}s (${this.toPercentsString(c, t)}) - Load: SceneData\n`, o += this.timestamps["luna:startup:loadScenesAsync"] - this.timestamps["luna:startup:loadPrefabsAsync"]; const h = this.toFormattedSeconds(this.timestamps["luna:startup:shaderReady"] - this.timestamps["luna:startup:loadScenesAsync"]), S = this.toPercentsString(h, t), w = pc.UnityShader.generateReport(); n += `${h}s (${S}) - Shaders compilation (Shaders: ${w.unityShadersCount}, Variants: ${w.totalVariantsCount}) (Optimise with Runtime Analysis)\n`, o += this.timestamps["luna:startup:shaderReady"] - this.timestamps["luna:startup:loadScenesAsync"]; const g = this.toFormattedSeconds(this.timestamps["luna:started"] - this.timestamps["luna:startup:shaderReady"]); n += `${g}s (${this.toPercentsString(g, t)}) - Scene Loading and Awake (Optimise initialisation code)\n`, o += this.timestamps["luna:started"] - this.timestamps["luna:startup:shaderReady"]; const A = this.toFormattedSeconds(this.timestamps.frame - this.timestamps["luna:started"]); return n += `${A}s (${this.toPercentsString(A, t)}) - First frame time (Simplify shaders)\n`, o += this.timestamps.frame - this.timestamps["luna:started"], n += `${this.toFormattedSeconds(o)}s (${this.toPercentsString(o / 1e3, t)}) - Running Total\n`, "develop" === a && (n += 'For "develop" platform, build optimisations are not applied. Check final result on actual platform build on devices.\n'), n }, debugReport: function () { const t = Object.keys(this.timestamps), s = Object.values(this.timestamps); let e = `Total: ${this.toFormattedSeconds(s[s.length - 1] - s[0])} seconds\n\n`; for (let a = 1; a < s.length; a++) { e += `${this.toFormattedSeconds(s[a] - s[a - 1])} sec : ${t[a]}\n` } return e }, isLoadingFinished: function () { return this.timestamps["luna:started"] > 0 && this.timestamps.frame > 0 } }, window.addEventListener("DOMContentLoaded", (() => { window.lunaStartup.logStartupEvent("DOMContentLoaded") })), window.addEventListener("luna:build", (() => { window.lunaStartup.logStartupEvent("luna:build") })), window.addEventListener("luna:start", (() => { window.lunaStartup.logStartupEvent("luna:start") })), window.addEventListener("luna:starting", (() => { window.lunaStartup.logStartupEvent("luna:starting") })), window.addEventListener("luna:startup:bundlesLoad", (() => { window.lunaStartup.logStartupEvent("luna:startup:bundlesLoad") })), window.addEventListener("luna:startup:loadSimpleAssetsAsync", (() => { window.lunaStartup.logStartupEvent("luna:startup:loadSimpleAssetsAsync") })), window.addEventListener("luna:startup:shaderReady", (() => { window.lunaStartup.logStartupEvent("luna:startup:shaderReady") })), window.addEventListener("luna:startup:loadComplexAssetsAsync", (() => { window.lunaStartup.logStartupEvent("luna:startup:loadComplexAssetsAsync") })), window.addEventListener("luna:startup:loadPrefabsAsync", (() => { window.lunaStartup.logStartupEvent("luna:startup:loadPrefabsAsync") })), window.addEventListener("luna:startup:loadScenesAsync", (() => { window.lunaStartup.logStartupEvent("luna:startup:loadScenesAsync") })), window.addEventListener("luna:started", (() => { window.lunaStartup.logStartupEvent("luna:started"), window.lunaStartup.measuredTime.loadTime = window.lunaStartup.timestamps["luna:started"] - window.lunaStartup.timestamps["luna:startup:htmlInitializationTimestamp"]; const t = pc.Application.getApplication(), s = t.events || t; s.once("postrender", (() => { window.lunaStartup.logStartupEvent("frame"), s.once("prerender", (() => { window.lunaStartup.notifyLoadingComplete() }), this) }), this) })) })()